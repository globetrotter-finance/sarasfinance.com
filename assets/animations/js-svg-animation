<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configurable SVG Animation Component</title>
    <style>
        /*
         * NOTE: The body has NO background color to demonstrate the component's transparency.
         * The other styles are only to center the animation for this example file.
        */
        body {
            margin: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        /* --- CSS for the Component's Container --- */
        .svg-container {
            /* FIX: Increased the size of the SVG container */
            width: 650px;
            height: 650px;
        }
    </style>
</head>
<body>

    <!-- --- HTML Placeholder for the Component --- -->
    <div id="svg-container" class="svg-container"></div>

    <!-- --- JavaScript to Generate and Inject the SVG --- -->
    <script>
        /**
         * Generates and injects a configurable, scattered AI dot animation as an SVG.
         * @param {string} containerId The ID of the container element for the SVG.
         * @param {string} logoPath Path to the central logo image.
         * @param {object} [options={}] Optional configuration overrides.
         */
        function createAiAnimationSVG(containerId, logoPath, options = {}) {
            const container = document.getElementById(containerId);
            if (!container) {
                console.error(`Container with ID "${containerId}" not found.`);
                return;
            }

            // --- Default Configuration ---
            const defaultConfig = {
                particleCount: 70, // Default number of dots
                baseRadius: 120,   // The average distance from the center
                radiusVariance: 40,  // How much the positions are scattered
                colors: ['#2563EB', '#3B82F6'],
                rotationSpeed: 60,
                numBreathingAnimations: 5,
                dotSize: 1.5,
                glowDeviation: 7
            };
            const config = { ...defaultConfig, ...options };

            function generateSVG() {
                // 1. --- Generate CSS for Animations ---
                let animationStyles = `
                    #master-rotation-group {
                        animation: rotate-all ${config.rotationSpeed}s linear infinite;
                        transform-origin: center;
                    }
                    @keyframes rotate-all {
                        from { transform: rotate(0deg); }
                        to { transform: rotate(360deg); }
                    }
                    .ring-group { transform-origin: center; }
                `;

                // Create a variety of "breathing" keyframe animations
                for (let i = 1; i <= config.numBreathingAnimations; i++) {
                    const duration = 10 + Math.random() * 4;
                    const scaleMin = 0.8 + Math.random() * 0.3;
                    const scaleMax = 1.2 + Math.random() * 0.2;
                    animationStyles += `
                        .breathe-${i} { animation: breathe-${i} ${duration.toFixed(2)}s ease-in-out infinite; }
                        @keyframes breathe-${i} {
                            0%, 100% { transform: scale(${scaleMin.toFixed(2)}); }
                            50% { transform: scale(${scaleMax.toFixed(2)}); }
                        }
                    `;
                }

                // 2. --- Generate SVG Dot Elements ---
                let dotGroups = Array.from({ length: config.numBreathingAnimations }, () => '');

                for (let i = 0; i < config.particleCount; i++) {
                    const angle = Math.random() * 2 * Math.PI;
                    const radius = config.baseRadius + (Math.random() * 2 - 1) * config.radiusVariance;
                    const cx = 200 + radius * Math.cos(angle);
                    const cy = 200 + radius * Math.sin(angle);
                    const color = config.colors[Math.floor(Math.random() * config.colors.length)];
                    const groupIndex = i % config.numBreathingAnimations;

                    dotGroups[groupIndex] += `<circle cx="${cx.toFixed(2)}" cy="${cy.toFixed(2)}" r="${config.dotSize}" fill="${color}"/>\n`;
                }

                let finalDotsSVG = '';
                dotGroups.forEach((group, index) => {
                    const animationDelay = `animation-delay: -${(Math.random() * 10).toFixed(2)}s;`;
                    finalDotsSVG += `<g class="ring-group breathe-${index + 1}" style="${animationDelay}">${group}</g>\n`;
                });


                // 3. --- Assemble the Final SVG ---
                const finalSVG = `
                    <svg width="100%" height="100%" viewBox="0 0 400 400" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <style>${animationStyles}</style>
                        <defs>
                            <filter id="glow">
                                <feGaussianBlur stdDeviation="${config.glowDeviation}" result="blur" />
                                <feMerge>
                                    <feMergeNode in="blur" />
                                    <feMergeNode in="SourceGraphic" />
                                </feMerge>
                            </filter>
                        </defs>
                        <g id="animation-container" filter="url(#glow)">
                            <g id="master-rotation-group">
                                ${finalDotsSVG}
                            </g>
                        </g>
                        <!-- FIX: Removed the filter from the image tag to eliminate the shadow -->
                        <image xlink:href="${logoPath}" x="160" y="160" height="80" width="80"/>
                    </svg>`;

                return finalSVG;
            }

            container.innerHTML = generateSVG();
        }

        // --- Configuration for the Animation ---
        createAiAnimationSVG('svg-container', '/assets/LOGO.png', {
            colors: ['#2563EB', '#3B82F6', '#60A5FA', '#93C5FD'],
            baseRadius: 120,
            radiusVariance: 40,
            particleCount: 200,
        });
    </script>
</body>
</html>

