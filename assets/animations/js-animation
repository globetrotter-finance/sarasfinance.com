<!-- components/animation.html -->

<div class="canvas-container">
    <canvas id="aiCanvas"></canvas>
</div>

<script>
    /**
     * Creates a reusable, configurable AI dot animation.
     * @param {string} canvasId The ID of the canvas element.
     * @param {string} logoPath Path to the central logo image.
     * @param {object} [options={}] Optional configuration overrides.
     */
    function createAiAnimation(canvasId, logoPath, options = {}) {
        const canvas = document.getElementById(canvasId);
        if (!canvas) return;
        const ctx = canvas.getContext('2d');

        const defaultConfig = {
            numRings: 6,
            baseRadius: 150,
            radiusVariance: 60,
            particleCount: 300,
            particleSize: 3,
            glowIntensity: 15,
            colors: ['#2563EB', '#3B82F6'],
            logoGlowColor: 'rgba(37, 99, 235, 0.5)',
            rotationSpeed: 0.00002,
            breathingSpeed: 0.00007
        };
        const config = { ...defaultConfig, ...options };

        let particles = [];
        let rotation = 0;
        let lastTime = 0;
        let animationFrameId; // To manage the animation loop

        const logo = new Image();
        let isLogoLoaded = false;
        logo.onload = () => isLogoLoaded = true;
        logo.src = logoPath;

        function setupCanvas() {
            const container = canvas.parentElement;
            if (!container) return;
            const size = Math.min(container.offsetWidth, container.offsetHeight, 550);
            const dpr = window.devicePixelRatio || 1;
            canvas.width = size * dpr;
            canvas.height = size * dpr;
            canvas.style.width = `${size}px`;
            canvas.style.height = `${size}px`;
            ctx.scale(dpr, dpr);
        }

        function createParticles() {
            particles = [];
            for (let i = 0; i < config.particleCount; i++) {
                const randomColor = config.colors[Math.floor(Math.random() * config.colors.length)];
                particles.push({
                    ring: i % config.numRings,
                    angle: Math.random() * Math.PI * 2,
                    speedOffset: Math.random() * 0.5 + 0.75,
                    radiusOffset: Math.random() * 2 - 1,
                    sizeOffset: Math.random() * 0.5 + 0.5,
                    color: randomColor
                });
            }
        }

        function drawParticles(ctx, time, centerX, centerY, currentRotation) {
            particles.forEach(p => {
                const timeComponent = time * config.breathingSpeed * p.speedOffset;
                const ringRadius = config.baseRadius +
                                   Math.sin(timeComponent + p.ring) * config.radiusVariance * p.radiusOffset;
                const x = centerX + ringRadius * Math.cos(p.angle + currentRotation);
                const y = centerY + ringRadius * Math.sin(p.angle + currentRotation);
                const size = config.particleSize * p.sizeOffset;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fillStyle = p.color;
                ctx.fill();
            });
        }

        function animate(currentTime) {
            if (!lastTime) lastTime = currentTime;
            const deltaTime = currentTime - lastTime;
            lastTime = currentTime;

            const logicalWidth = canvas.width / (window.devicePixelRatio || 1);
            const logicalHeight = canvas.height / (window.devicePixelRatio || 1);
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            const centerX = logicalWidth / 2;
            const centerY = logicalHeight / 2;
            rotation += config.rotationSpeed * deltaTime;

            ctx.filter = `blur(${config.glowIntensity}px)`;
            drawParticles(ctx, currentTime, centerX, centerY, rotation);

            ctx.filter = 'none';
            drawParticles(ctx, currentTime, centerX, centerY, rotation);

            if (isLogoLoaded) {
                const logoSize = 80;
                const logoX = centerX - logoSize / 2;
                const logoY = centerY - logoSize / 2;
                ctx.filter = `blur(15px) drop-shadow(0 0 15px ${config.logoGlowColor})`;
                ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);
                ctx.filter = 'none';
                ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);
            }
            animationFrameId = requestAnimationFrame(animate);
        }

        // Cleanup function to stop the animation when the component is removed
        const cleanup = () => {
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            window.removeEventListener('resize', setupCanvas);
        };

        window.addEventListener('resize', setupCanvas, { passive: true });

        // This makes sure the cleanup happens if the user navigates away
        canvas.dataset.cleanup = cleanup;

        setupCanvas();
        createParticles();
        animate(0);
    }

    // --- Configuration for the Animation ---
    createAiAnimation('aiCanvas', '/assets/LOGO.png', {
        colors: ['#2563EB', '#3B82F6', '#60A5FA', '#93C5FD'],
        baseRadius: 120,
        radiusVariance: 40,
        particleCount: 200,
    });
</script>